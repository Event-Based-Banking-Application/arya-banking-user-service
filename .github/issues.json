[
  {
    "service": "User Management Service",
    "issues": [
      {
        "task": "Register user (Step 1 - name, email, phone)",
        "description": "Provide a REST API endpoint to receive and store initial user registration data: name, email, and phone number. Save these in a temporary or partial registration state and validate as necessary for later completion steps.",
        "labels": [
          "user-management",
          "registration"
        ]
      },
      {
        "task": "Validate email format",
        "description": "Implement backend logic to strictly validate email address format (RFC 5322 compliance), returning specific errors for invalid emails to assist frontend UX.",
        "labels": [
          "user-management",
          "validation"
        ]
      },
      {
        "task": "Validate phone format",
        "description": "Perform backend validation (e.g., regex or library) of phone number input, supporting local and international formats. Ensure only valid numbers are accepted.",
        "labels": [
          "user-management",
          "validation"
        ]
      },
      {
        "task": "Check duplicate email/phone",
        "description": "Query persistent store on registration to enforce email and phone's uniqueness. Reject requests with duplicate contact info and return appropriate error messages.",
        "labels": [
          "user-management",
          "validation"
        ]
      },
      {
        "task": "Store registration step state",
        "description": "Track registration progress at each step for each user (such as a RegistrationProgress enum or status field). Use this for step resumption and multi-screen onboarding.",
        "labels": [
          "user-management",
          "registration"
        ]
      },
      {
        "task": "Create full User object on step 1",
        "description": "Once initial registration is successful and contact info validated (even if unverified), persist a User domain object with fields: name, email, and phone for deeper onboarding.",
        "labels": [
          "user-management",
          "registration"
        ]
      },
      {
        "task": "Add permanent address",
        "description": "Collect and persist the user's permanent address with validation of address fields. Store address in the User Management Service to keep profile consistent.",
        "labels": [
          "user-management",
          "address"
        ]
      },
      {
        "task": "Add communication address",
        "description": "Optionally add a separate communication address linked to the user profile.",
        "labels": [
          "user-management",
          "address"
        ]
      },
      {
        "task": "Verify pincode format",
        "description": "Validate postal/pincode format as part of address validation, ensure consistency and correctness.",
        "labels": [
          "user-management",
          "validation",
          "address"
        ]
      },
      {
        "task": "Save addresses against user ID",
        "description": "Persist addresses with reference to the user for later retrieval and management.",
        "labels": [
          "user-management",
          "address"
        ]
      },
      {
        "task": "Update user profile information",
        "description": "Support user profile updates including name, contact info, and other personal details.",
        "labels": [
          "user-management",
          "profile"
        ]
      },
      {
        "task": "User blocking (admin/user triggered)",
        "description": "Support blocking or unblocking of users based on admin or automated triggers.",
        "labels": [
          "user-management",
          "security",
          "user-blocking"
        ]
      },
      {
        "task": "User deletion (soft and hard)",
        "description": "Implement GDPR-compliant soft and hard deletion of user profiles.",
        "labels": [
          "user-management",
          "gdpr",
          "deletion"
        ]
      },
      {
        "task": "Complete registration flow (emit UserFullyRegistered event)",
        "description": "Emit UserFullyRegistered event after completion of all registration steps including address and profile.",
        "labels": [
          "user-management",
          "event"
        ]
      }
    ]
  }
]
